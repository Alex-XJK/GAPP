
Component {
    
    @let offsetX = 150
    @let offsetY = 150
    @let gridW = 8
    // @let gridH = 12
    @let naColor = "#aaa"
    XYPlot {
        static = true
        discreteCategory = true
        x = offsetX + 3; y = 20
        width = gridW * samples.length
        height = offsetY - 23
        data = hist.result
        stackedData = {
            stacked: hist.indexes
        }
        // gap = 1
        padding = 0
        StackedBars {
            data = "stacked" 
            on:click = (ev, el) => debugFunc(ev, el)
            :children(d) {
                Rect.full{
                    fill = hist.colorMap[d.key]
                    // width = 40; x = 50%
                    anchor = @anchor("top","center")
                }
            }
            width = 100%
            height = 100%
            stroke = "#fff"
            fill = "none"
        }
    }
    // Rows {
    //     x = 200; y = 150
    //     @for sp in Object.keys(hist.colorMap) {
    //         Component {
    //             height = 20
    //             Rect {
    //                 width = 15; height = 10; fill = hist.colorMap[sp]
    //             }
    //             Text {
    //                 x = 17; text = sp; fill = "#fff"; fontSize = 10
    //             }
    //         }
    //     }
    // }
    Component {
        x = 20; y = 20; width = 100; height = 100
        Rect.full {
            fill = controllerMode === "zoom" ? "rgb(200,0,0,0.2)" : "rgb(0,200,0,0.2)"
            on:wheel = (ev) => controlMain(ev)
            on:click = swicthMode
        }
        Rect {
            x = 75%; y = 75%; width = 25%; height = 25%
            on:click = fitSize
        }
        
    }
    Component {
        height = fullDisplay ? mainHeight : 300; clip = @clip("bound"); y = offsetY
        Component {
            y = yPos
            // height = gridH * mainHeatmap.length
            height = mainHeight
            Tree { //left side tree
            height = 100%
            static = true
            width = offsetX
            x = 20
            data = ovTree
            direction = "right"
            link.stroke = "#000"
            :leaf({leaf, tree}) {
                Component{}
            }
            :node {
                Component{}
            }
        }

        Component {
            @let height = mainHeight / species.length
            x = offsetX; static = true
            @for (species, i) in mainHeatmap {
                @for (sample, j) in species {
                    Rect {
                        key = `main-${i}-${j}`
                        height = height - 1; width = gridW - 1; x = gridW * j; y = height * i
                        fill = mainColorGetter(sample)
                        // on:mouseenter = setActive(gridW * j, gridH * i)
                        // on:mouseleave = setActive(null, null)
                    }
                }
            }
        }
        //boxplot 
        @if mainHeight/species.length > 10 {
            XYPlot {
            static = true
            x = samples.length * gridW + 10 + offsetX
            invertValueAxis = true
            height = mainHeight
            width = 300
            flip = true
            data = {
                boxData1: boxplot.boxData[0],
                boxData2: boxplot.boxData[1]
            }
            Rect{
                width = 100%
                height = 100%
                fill = "none"
            }
            @for (item, index) in boxplot.boxData{
                Boxes {
                    key = index
                    data = "boxData" + (index + 1).toString()
                    showMean = true
                    showNotch = false
                    y = -gridH/6 + gridH * index /3
                    :box (_d) {
                        Rect.full  {
                            fill = colors[index]
                            stroke = colors[index]
                            fillOpacity = 0.01
                            behavior:tooltip {
                                content = (`min: ${_d.data[0].toFixed(2)} <br>
                                            first quartile: ${_d.data[1].toFixed(2)} <br>
                                            median: ${_d.data[2].toFixed(2)} <br>
                                            third quartile: ${_d.data[3].toFixed(2)} <br>
                                            max: ${_d.data[4].toFixed(2)} <br>`)
                            }
                            y = 33%
                            height = 33%
                        }
                    }
                    :whiskle (d) {
                        Line { x2 = 100%; y = 50%; stroke = colors[index];
                        }
                    }
                    :outlier{
                        Circle.centered { r = 2; fill = colors[index] }
                    }
                    :mean(means) {
                        Line {y1 = 33%; y2 = 66%; stroke = colors[index]}
                    }
                    :median(d) {}
                }
            }
            Axis("bottom"){
                y = 100%
            }
	    }
        }
        Component {
            @if state.activeX !== null && state.activeY !== null {
                Rect {
                    x = state.activeX + offsetX; y = 0
                    width = gridW
                    height = gridH * species.length
                    // stroke = @color("highlight")
                    stroke = "white"
                    strokeWidth = 2
                    fill = "none"
                    events = "none"
                }
                Rect {
                    x = 0; y = state.activeY
                    width = gridW * samples.length
                    height = gridH
                    // stroke = @color("highlight")
                    stroke = "white"
                    strokeWidth = 2
                    fill = "none"
                    events = "none"
                }
                Rect {
                    x = samples.length * gridW + 10 + offsetX; y = state.activeY
                    width = 300
                    height = gridH
                    // stroke = @color("highlight")
                    stroke = "white"
                    strokeWidth = 2
                    fill = "none"
                    events = "none"
                }
            }
        }
        }
        
    }
    
    
    
    Component { //meta area
        y = offsetY + 10 + (fullDisplay ? mainHeight : 300)
        Text {
            static = true
            anchor = @anchor("t", "c");  y = 2
            x = offsetX + 4 * samples.length; text = "Meta data"
        }

        Component {
            static = true
            y = 20
            //@for (k, i) in Object.keys(m)
            Rows {
                @for (f, i) in metaFeatures {
                    @if !!metaInfo[f] {
                        Component {
                        height = 12
                        Component { // legend area
                            x = 10; height = 100%
                            Columns {
                                Component {
                                    width = 20
                                    Rect {
                                        height = 11; width = 18; fill = naColor
                                    }
                                    Line {
                                        x2 = 20; y1 = 11; stroke = "red" 
                                    }
                                    Text("NA") {
                                        fontSize = 11; anchor = @anchor("t", "c"); x = 10; fill = "#000"
                                    }
                                }
                                @if !metaInfo[f].useNumber {
                                    @let rectW = (offsetX - 10 - 20) / metaInfo[f].values.length 
                                @for cat in metaInfo[f].values {
                                    Component {
                                        width = rectW
                                        Rect {
                                            height = 11; width = rectW - 2
                                            fill = metaInfo[f].color(cat)
                                        }
                                        @if (rectW > 20) {
                                            Text {
                                                x = 50%; anchor = @anchor("t", "c")
                                                fill = "#000"; text = cat; fontSize = 10
                                            }
                                        }
                                    }
                                }
                                } @else {
                                    Component {
                                    @let div = (metaInfo[f].rangeMax - metaInfo[f].rangeMin) / 20
                                    @let rectW = (offsetX - 10 - 20) / 20
                                    @for i in 20 {
                                        Rect {
                                            height = 11; width = rectW; x = rectW * i
                                            fill = metaInfo[f].color(metaInfo[f].rangeMin + i * div)
                                        }
                                    }
                                    Text(metaInfo[f].rangeMin) {
                                        anchor = @anchor("l", "t"); x = 2; fill = "#000"
                                    }
                                    Text(metaInfo[f].rangeMax) {
                                        anchor = @anchor("right", "top"); x = offsetX - 12 - 20; fill = "#000"
                                    }
                                    }
                                }
                                
                            }
                        }

                        Component {
                            x = offsetX; height = 100%
                        @for (d, j) in metaData[f] {
                            @let metaFill = metaInfo[f].color(d)
                            @if !!metaFill {
                                Rect {
                                    height = 95%; width = gridW - 1; x = gridW * j; fill = metaFill
                                }
                            } @else {
                                Rect {
                                    height = 95%; width = gridW - 1; x = gridW * j; fill = naColor
                                }
                                Line {
                                    x1 = gridW * j; x2 = gridW * j + gridW; y1 = 95%; y2 = 0; stroke = "red"
                                }
                            }
                            
                        }
                        }
                    }
                    }
                    
                }  
            }
        }

        Component {
            @if state.activeX !== null {
                Rect {
                    x = state.activeX + offsetX; y = 20
                    width = gridW
                    height = gridH * metaFeatures.length
                    // stroke = @color("highlight")
                    stroke = "white"
                    strokeWidth = 2
                    fill = "none"
                    events = "none"
                }
            }
        }
    }
}