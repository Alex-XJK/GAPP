svg {
	width = auto
	height = 800
	Component {
		XYPlot {
            @let groupColorMap = scatterClusterData? @colorMap(clusters, colors) : @colorMap(groups, colors)
			height = plotHeight; width = plotWidth;
			x = 50; y = 50
			valueRange = valueRange
			categoryRange = categoryRange
			hasPadding = false
			data = scatterData
            dataHandler = {
                default: {
                    values: d => d,
                    pos: d => d[xLabel],
                    value: d => d[yLabel],
                }
            }
			Rect { fill = "none"; stroke = "#000" }
    
            AxisBackground {
                dashArray = "1, 2"
            }
            AxisBackground {
                orientation = "vertical"
                dashArray = "1, 2"
            }

            @for (scatter, i) in scatterData {
                @if (!scatter.cluster) {
                    Circle.centered{ 
                        key = `scatter-${i}`; x = @scaled-x(scatter[xLabel]); y = @scaled-y(scatter[yLabel]); r = 4
                        fill = groupColorMap.get(scatter[groupLabel])
                        behavior:tooltip {
                            content = Object.keys(scatter).reduce(((acc, cur) => acc + `${cur}: ${scatter[cur]}<br>` ), "") 
                        }
                    }
                } @elsif (scatter[groupLabel] == groups[0]) {
                    Circle.centered{ 
                        key = `scatter-${i}`; x = @scaled-x(scatter[xLabel]); y = @scaled-y(scatter[yLabel]); r = 4
                        fill = groupColorMap.get(scatter.cluster)
                        behavior:tooltip {
                            content = Object.keys(scatter).reduce(((acc, cur) => acc + `${cur}: ${scatter[cur]}<br>` ), "") 
                        }
                    }
                } @else {
                    Rect.centered {
                        key = `scatter-${i}`
                        x = @scaled-x(scatter[xLabel]); y = @scaled-y(scatter[yLabel]); fill = groupColorMap.get(scatter.cluster)
                        width = 8; height = 8
                        behavior:tooltip {
                            content = Object.keys(scatter).reduce(((acc, cur) => acc + `${cur}: ${scatter[cur]}<br>` ), "") 
                        }
                    }
                }
                
            }

            @if !!scatterVectorData {
                @for (vector, i) in scatterVectorData {
                    Component {
                        Arrow {
                            key =`vector-${i}` 
                            x = @scaled-x(0); y = @scaled-y(0)
                            x2 = @scaled-x(vector[xLabel]); y2= @scaled-y(vector[yLabel])
                        }
                    }
                    Component {
                        x = @scaled-x(vector[xLabel] * 1.1) 
                        y = @scaled-y(vector[yLabel] * 1.1 ) 
                    
                        @if (vector[xLabel] > 0) {
                            Text {
                                text = vector[vectorLabel]
                                anchor = @anchor("l","m")
                            }
                        } @else {
                            Text {
                                text = vector[vectorLabel]
                                anchor = @anchor("r","m")
                            }
                        }
                        
                    }
                }
            }

            @if !!scatterClusterData {
                @for oval in ovalData {
                    Component {
                        x = @scaled-x(oval.center.x) - oval.dx; y = @scaled-y(oval.center.y) - oval.dy
                        Path {
                            d = oval.path
                            strokeWidth = 2
                            fill = "none"
                            stroke = groupColorMap.get(oval.cluster)
                        }
                        Path {
                            d = oval.xAxisPath; dashArray = "1, 2"
                            stroke = groupColorMap.get(oval.cluster)
                        }
                         Path {
                            d = oval.yAxisPath; dashArray = "1, 2"
                            stroke = groupColorMap.get(oval.cluster)
                        }
                    }
                }
            }
			
			Axis("bottom") { y = 100% }
			Axis("left") {}

            Component {
                y = 50% 
                Text(yLabel) {
                    x = -15
                    rotation = @rotate(-90)
                    anchor = @anchor("m", "c")
                    fontSize = 15
                }    
            }

            Component {
                x = 50%; y = 100% 
                Text(xLabel) {
                    y = 15
                    anchor = @anchor("m", "c")
                    fontSize = 15
                }    
            }
            
            Component {
                x = 20; y = 20
                height = 50; width = 70
                Rect.full {
                    stroke = @color("line")
                    fill = "white"
                }
                Rows {
                    @for (group, i) in groups {
                        Component {
                            height = 25
                            @if scatterClusterData {
                               @if i === 0 {
                                    Circle.centered{
                                        x = 8; y = 12.5; r = 4; fill = colors[0]
                                    }
                               } @else {
                                   Rect.centered {
                                       x = 8; y = 12.5; height = 8; width = 8; fill = colors[0]
                                   }
                               }
                            } @else {
                                Circle.centered{
                                        x = 8; y = 12.5; r = 4; fill = colors[i]
                                }
                            }
                            Text(group) {
                                x = 15; y = 12.5; anchor = @anchor("l","m")
                            }
                        }
                    }
                }  
            }

            @if scatterClusterData {
                Component {
                    x = 20; y = 80
                    height = 50; width = 70
                    Rect.full {
                        stroke = @color("line")
                        fill = "white"
                    }
                    Rows {
                        @for (cluster, i) in clusters {
                            Component {
                                height = 25

                                Circle.centered{
                                        x = 8; y = 12.5; r = 4; fill = colors[i]
                                }
                                
                                Text(cluster) {
                                    x = 15; y = 12.5; anchor = @anchor("l","m")
                                }
                            }
                        }
                    }
                    
                }
            }
		}
	}
}